---
# file: ansible/configure_servers.yml
# This playbook configures the EC2 instances provisioned by Terraform.

# =========================================================================
# Play 1: Base Setup (Runs on all servers)
# =========================================================================
- name: Initial Setup and Common Utility Installation
  hosts: all_ec2_instances # Assumes this group is created in your dynamic inventory
  become: true             # Execute tasks with elevated privileges (sudo)
  gather_facts: true

  tasks:
    - name: Update apt package cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600

    - name: Install essential packages
      ansible.builtin.apt:
        name:
          - curl
          - wget
          - git
          - apt-transport-https
          - ca-certificates
          - software-properties-common
          - net-tools
        state: present

# =========================================================================
# Play 2: Jenkins Server Configuration
# Targets the 'jenkins-server'
# =========================================================================
- name: Configure Jenkins Server
  hosts: jenkins_server
  become: true
  
  tasks:
    - name: Install Open-JDK 17 (Java Dependency for Jenkins)
      ansible.builtin.apt:
        name: openjdk-17-jdk
        state: present
    
    - name: Download Jenkins apt key
      ansible.builtin.get_url:
        url: https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
        dest: /usr/share/keyrings/jenkins-keyring.asc
        mode: '0644'
        force: true

    - name: Add Jenkins repository to sources list
      ansible.builtin.apt_repository:
        repo: deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian-stable binary/
        state: present
        filename: jenkins

    - name: Update apt package cache after adding repo
      ansible.builtin.apt:
        update_cache: true
    
    - name: Install Jenkins
      ansible.builtin.apt:
        name: jenkins
        state: present

    - name: Ensure Jenkins service is running and enabled
      ansible.builtin.service:
        name: jenkins
        state: started
        enabled: true

# =========================================================================
# Play 3: Monitoring Server (Prometheus/Grafana via Docker)
# Targets the 'monitoring-server'
# =========================================================================
- name: Configure Monitoring Server (Prometheus/Grafana via Docker)
  hosts: monitoring_server
  become: true
  
  tasks:
    # 1. Install Docker
    - name: Add Docker GPG key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
    
    - name: Add Docker APT repository
      ansible.builtin.apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
        state: present
        update_cache: true

    - name: Install Docker packages
      ansible.builtin.apt:
        name: 
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        
    - name: Ensure Docker service is running
      ansible.builtin.service:
        name: docker
        state: started
        enabled: true

    # 2. Deploy Prometheus Container (Basic setup)
    - name: Create Prometheus configuration directory
      ansible.builtin.file:
        path: /etc/prometheus
        state: directory
        mode: '0755'

    - name: Create basic prometheus.yml config
      ansible.builtin.copy:
        content: |
          global:
            scrape_interval: 15s 
          scrape_configs:
            - job_name: 'prometheus'
              static_configs:
                - targets: ['localhost:9090']
        dest: /etc/prometheus/prometheus.yml
        mode: '0644'

    - name: Deploy Prometheus container
      community.docker.docker_container:
        name: prometheus
        image: prom/prometheus:latest
        state: started
        restart_policy: always
        published_ports: 
          - "9090:9090"
        volumes:
          - /etc/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
          - prometheus_data:/prometheus
        
    # 3. Deploy Grafana Container
    - name: Deploy Grafana container
      community.docker.docker_container:
        name: grafana
        image: grafana/grafana:latest
        state: started
        restart_policy: always
        published_ports:
          - "3000:3000"

# =========================================================================
# Play 4: Configure Kubernetes Master Node
# Targets the 'kubernetes-master-node'
# =========================================================================
- name: Configure Kubernetes Master Node
  hosts: k8s_master
  become: true
  vars:
    k8s_pod_network_cidr: "10.244.0.0/16" # Flannel CNI network
    
  tasks:
    # K8s Pre-requisites (Common)
    - name: Disable swap
      ansible.builtin.shell: swapoff -a

    - name: Configure kernel parameters for K8s
      ansible.builtin.copy:
        content: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward                 = 1
        dest: /etc/sysctl.d/99-kubernetes-cri.conf
        mode: '0644'
        
    - name: Apply sysctl parameters
      ansible.builtin.command: sysctl --system
      
    # Install Containerd and Kubeadm/Kubelet/Kubectl (Common)
    - name: Install containerd
      ansible.builtin.apt:
        name: containerd
        state: present
    
    - name: Configure containerd for SystemdCgroup
      ansible.builtin.shell: |
        containerd config default | sudo tee /etc/containerd/config.toml
        sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml
        systemctl restart containerd
        
    - name: Download Kubernetes GPG key
      ansible.builtin.get_url:
        url: https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key
        dest: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        mode: '0644'
        force: true

    - name: Add Kubernetes APT repository
      ansible.builtin.apt_repository:
        repo: deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /
        state: present
        filename: kubernetes

    - name: Install kubelet, kubeadm, kubectl
      ansible.builtin.apt:
        name: 
          - kubelet
          - kubeadm
          - kubectl
        state: present
        update_cache: true

    # Master-specific initialization
    - name: Initialize Kubernetes cluster
      ansible.builtin.shell: >
        kubeadm init 
        --apiserver-advertise-address={{ ansible_host }} 
        --pod-network-cidr={{ k8s_pod_network_cidr }} 
        --ignore-preflight-errors=NumCPU
      register: kube_init_result

    - name: Set Kubeconfig for the 'ubuntu' user
      ansible.builtin.shell: |
        mkdir -p $HOME/.kube
        sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
        sudo chown $(id -u):$(id -g) $HOME/.kube/config
      args:
        warn: false # Suppress warnings about running simple commands

    - name: Install CNI (Flannel)
      ansible.builtin.become: false # Run as the unprivileged user (ubuntu)
      ansible.builtin.shell: kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml

    - name: Store the Kubeadm Join Command for workers
      ansible.builtin.set_fact:
        join_command: "{{ kube_init_result.stdout_lines | select('match', 'kubeadm join .*') | list | first }}"
      # Delegate fact to localhost so it is available in the next play
      delegate_to: localhost 
      run_once: true

# =========================================================================
# Play 5: Configure Kubernetes Worker Node
# Targets the 'kubernetes-worker-node'
# =========================================================================
- name: Configure Kubernetes Worker Node
  hosts: k8s_worker
  become: true
  
  tasks:
    # 1. K8s Pre-requisites & Installation (Repeated for Worker)
    # The tasks from Play 4 (Master) must be run on the worker as well.
    # NOTE: In a real-world scenario, you would use an Ansible Role to avoid repetition.
    
    - name: Run K8s common setup tasks on worker
      ansible.builtin.include_tasks:
        file: common_k8s_setup.yml # Conceptual file for brevity, tasks are repeated below

    - name: Disable swap (Worker)
      ansible.builtin.shell: swapoff -a

    - name: Configure kernel parameters for K8s (Worker)
      ansible.builtin.copy:
        content: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward                 = 1
        dest: /etc/sysctl.d/99-kubernetes-cri.conf
        mode: '0644'
        
    - name: Apply sysctl parameters (Worker)
      ansible.builtin.command: sysctl --system
      
    - name: Install containerd (Worker)
      ansible.builtin.apt:
        name: containerd
        state: present
    
    - name: Configure containerd for SystemdCgroup (Worker)
      ansible.builtin.shell: |
        containerd config default | sudo tee /etc/containerd/config.toml
        sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml
        systemctl restart containerd

    - name: Install kubelet, kubeadm, kubectl (Worker)
      ansible.builtin.apt:
        name: 
          - kubelet
          - kubeadm
          - kubectl
        state: present
        update_cache: true

    # 2. Join the Worker node to the Cluster
    # Assumes the 'join_command' fact was captured from the master play (Play 4).
    - name: Join the Worker node to the Cluster
      ansible.builtin.shell: "{{ hostvars[groups['k8s_master'][0]]['join_command'] }}"
      register: join_result
      failed_when: "'This node has joined the cluster' not in join_result.stdout and 'already a member' not in join_result.stdout"