---
# ==========================================================
# Role: Kubernetes Installation and Cluster Setup
# Works for both Master and Worker nodes.
# ==========================================================

- name: Ensure APT dependencies are installed
  become: yes
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
    state: present
    update_cache: yes

- name: Ensure keyrings directory exists
  become: yes
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

- name: Download Kubernetes GPG key (if not already present)
  become: yes
  ansible.builtin.shell: |
    curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg
  args:
    creates: /etc/apt/keyrings/kubernetes-archive-keyring.gpg
  changed_when: false

- name: Add Kubernetes apt repository
  become: yes
  ansible.builtin.apt_repository:
    repo: 'deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main'
    state: present
    filename: kubernetes
    update_cache: yes

# ----------------------------------------------------------
# INSTALL KUBERNETES COMPONENTS
# ----------------------------------------------------------

- name: Install Kubernetes tools (kubeadm, kubelet, kubectl)
  become: yes
  ansible.builtin.apt:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: present

- name: Hold Kubernetes package versions
  become: yes
  ansible.builtin.shell: apt-mark hold kubelet kubeadm kubectl
  changed_when: false

# ----------------------------------------------------------
# DISABLE SWAP (TEMP + PERMANENT)
# ----------------------------------------------------------

- name: Disable swap temporarily
  become: yes
  ansible.builtin.command: swapoff -a
  ignore_errors: yes

- name: Disable swap permanently (comment out swap entries in /etc/fstab)
  become: yes
  ansible.builtin.replace:
    path: /etc/fstab
    regexp: '^([^#].*\sswap\s.*)$'
    replace: '# \1'

# ----------------------------------------------------------
# MASTER NODE SETUP
# ----------------------------------------------------------

- name: Initialize Kubernetes Control Plane
  become: yes
  ansible.builtin.shell: |
    kubeadm init --pod-network-cidr=192.168.0.0/16
  when: inventory_hostname in groups['kubernetes_master']
  args:
    creates: /etc/kubernetes/admin.conf

- name: Wait 30 seconds for Kubernetes API to stabilize
  ansible.builtin.pause:
    seconds: 30
  when: inventory_hostname in groups['kubernetes_master']

- name: Configure kubectl for root user
  become: yes
  ansible.builtin.shell: |
    mkdir -p /root/.kube
    cp -i /etc/kubernetes/admin.conf /root/.kube/config
    chown root:root /root/.kube/config
  when: inventory_hostname in groups['kubernetes_master']
  args:
    creates: /root/.kube/config

- name: Deploy Calico network plugin
  become: yes
  ansible.builtin.shell: |
    kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.28.0/manifests/calico.yaml
  when: inventory_hostname in groups['kubernetes_master']
  changed_when: false

# ----------------------------------------------------------
# FETCH JOIN COMMAND (ON MASTER)
# ----------------------------------------------------------

- name: Get kubeadm join command from master
  become: yes
  ansible.builtin.command: kubeadm token create --print-join-command --ttl 0
  register: kubeadm_join_command
  delegate_to: "{{ groups['kubernetes_master'][0] }}"
  run_once: true

# ----------------------------------------------------------
# WORKER NODE JOIN
# ----------------------------------------------------------

- name: Join worker nodes to Kubernetes cluster
  become: yes
  ansible.builtin.shell: "{{ kubeadm_join_command.stdout }}"
  when: inventory_hostname in groups['kubernetes_workers']
  args:
    creates: /etc/kubernetes/kubelet.conf
