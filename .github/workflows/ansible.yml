name: "üöÄ Automated Ansible Deployment After Terraform Apply"

on:
  # üëá Automatically trigger after Terraform workflow completes successfully
  workflow_run:
    workflows: ["üî® Infrastructure Configuring using Terraform on AWS"]
    types:
      - completed

  # üëá Manual trigger (optional)
  workflow_dispatch:
    inputs:
      component:
        description: "Select which component to deploy"
        required: true
        type: choice
        options:
          - jenkins
          - grafana
          - prometheus
          - k8s-master
          - k8s-worker
        default: "jenkins"

env:
  AWS_REGION: ap-south-1

jobs:
  ansible-deploy:
    name: "üß© Run Ansible Playbook After Terraform"
    runs-on: ubuntu-latest
    # ‚úÖ FIX 1: Add null check for manual trigger
    if: |
      (github.event_name == 'workflow_dispatch') || 
      (github.event.workflow_run.conclusion == 'success')

    permissions:
      id-token: write
      contents: read

    steps:
      # ‚úÖ Step 1: Checkout repo
      - name: "üì¶ Checkout Repository"
        uses: actions/checkout@v4

      # ‚úÖ Step 2: Configure AWS credentials
      - name: "üîê Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

# ‚úÖ Step 3: Install Python, Ansible, and AWS collections
      - name: "üêç Set Up Python & Install Dependencies"
        run: |
          # 1. Install Ansible and dependencies
          pip3 install ansible boto3 botocore

          # 2. Force install AWS collections to ensure the inventory plugin is available
          ansible-galaxy collection install amazon.aws community.aws --force
      # but guarantees the path is set correctly for subsequent steps)
      - name: "‚öôÔ∏è Configure Ansible Collection Path"
        run: echo "ANSIBLE_COLLECTIONS_PATHS=$HOME/.ansible/collections" >> $GITHUB_ENV

      # The inventory and playbook steps will now use the correct path.

      # ‚úÖ Step 4: Create dynamic inventory file for AWS SSM
      - name: "üìú Generate Dynamic Inventory (SSM)"
        run: |
          cat <<'EOF' > inventory_aws_ssm.yml
          plugin: amazon.aws.aws_ssm
          regions:
            - ap-south-1
          filters:
            # Optional: only include instances tagged with Project=Netflix
            tag:Project: Netflix
          hostnames:
            - tag:Name
          compose:
            ansible_user: ubuntu
          EOF

      # ‚úÖ Step 5: Validate inventory (debug)
      - name: "üîç Debug Inventory"
        run: ansible-inventory -i inventory_aws_ssm.yml --list --yaml

      # ‚úÖ Step 6: Run playbook for the selected component
      - name: "‚öôÔ∏è Run Ansible Playbook for Selected Component"
        run: |
          COMPONENT="${{ github.event.inputs.component }}"
          if [ -z "$COMPONENT" ]; then
            COMPONENT="jenkins"
          fi
          echo "üõ† Running Ansible playbook for: $COMPONENT"
          ansible-playbook -i inventory_aws_ssm.yml "ansible/${COMPONENT}.yml" -v
        shell: bash

      # ‚úÖ Step 7: Verify Ansible installation
      - name: "‚úÖ Verify Ansible Installation"
        run: ansible --version
