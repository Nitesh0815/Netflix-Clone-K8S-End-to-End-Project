name: 'ðŸ”¨ Infrastructure Configuring using Terraform on AWS' 

on: 
  workflow_dispatch:
    inputs:
      action:
        type: choice
        description: 'Terraform Action'
        options:
          - plan
          - apply
          - destroy
        required: true
        default: 'plan'

env:
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
  TF_WORKSPACE: ${{ secrets.TF_WORKSPACE }}
  TF_CLOUD_ORGANIZATION: ${{ secrets.TF_CLOUD_ORGANIZATION }}
permissions:
  contents: read


jobs:
  infrastructure-setup-using-terraform:
    name: Terraform ${{ github.event.input.actions }}
    runs-on: ubuntu-24.04
    environment: production

    defaults:
      run:
        shell: bash
        working-directory: Terraform

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setting Up the Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.13.3"
          terraform_wrapper: true
          cli_config_credentials_token: ${{ secrets. TF_API_TOKEN }}

      - name: Cache Terraform
        uses: actions/cache@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
            .terraform
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-
          
      - name: Initialising the Terraform
        run: terraform init

      - name: Terraform Format Check
        run: terraform fmt -check --diff

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        if: ${{ github.event.inputs.action == 'plan' }}
        run: terraform plan -input=false

      - name: Terraform Apply
        if: ${{ github.event.inputs.action == 'apply' }}
        run: terraform apply -auto-approve

      - name: Terraform destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        run: terraform destroy -auto-approve

      - name: ðŸ“¤ Save Terraform Outputs
        if: ${{ github.event.inputs.action == 'apply' }}
        run: terraform output -json > tf_outputs.json

      - name: ðŸ§± Generate Ansible Inventory
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          cd ..
          python3 ansible/generate_inventory.py
          echo "âœ… Generated ansible/inventory.yml"

      - name: ðŸ§° Install Ansible & Dependencies
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          sudo apt-get update -y
          sudo apt-get install -y python3 python3-pip
          pip3 install --upgrade pip
          pip3 install ansible boto3 botocore
          ansible-galaxy collection install amazon.aws
          ansible --version

      - name: ðŸª„ Run Ansible Playbook
        if: ${{ github.event.inputs.action == 'apply' }}
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          cd ..
          export ANSIBLE_HOST_KEY_CHECKING=False
          ansible-playbook -i ansible/inventory.yml ansible/playbook.yml -v
