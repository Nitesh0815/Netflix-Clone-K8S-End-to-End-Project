name: "ðŸ”¨ Terraform + Ansible Automation on AWS"

on:
  workflow_dispatch:
    inputs:
      action:
        type: choice
        description: "Select Terraform Action"
        options:
          - plan
          - apply
          - destroy
        required: true
        default: "plan"

env:
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: "ap-south-1"

jobs:
  terraform-ansible:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: Terraform Init
        run: terraform init

      - name: Terraform ${{ github.event.inputs.action }}
        run: terraform ${{ github.event.inputs.action }} -auto-approve

      - name: Setup Python for Ansible
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Ansible
        run: |
          pip install ansible boto3

      - name: Generate Dynamic Inventory
        run: |
          cat <<'PY' > generate_inventory.py
          import json, sys, os

          INSTANCE_GROUPS = {
              0: "jenkins_server",
              1: "monitoring_server",
              2: "k8s_master",
              3: "k8s_worker"
          }

          inventory = {"_meta": {"hostvars": {}}}
          for idx, name in INSTANCE_GROUPS.items():
              inventory[name] = {"hosts": [f"{name}_host_{idx}"]}
              inventory["_meta"]["hostvars"][f"{name}_host_{idx}"] = {
                  "ansible_host": f"192.168.1.{10+idx}"
              }

          print(json.dumps(inventory, indent=2))
          PY

      - name: Verify Inventory
        run: python3 generate_inventory.py

      - name: Run Ansible Playbook
        run: ansible-playbook -i generate_inventory.py playbook.yml
