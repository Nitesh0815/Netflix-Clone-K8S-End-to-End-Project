name: 'üî® Terraform + Ansible Automation on AWS'

on:
  workflow_dispatch:
    inputs:
      action:
        type: choice
        description: 'Select Terraform Action'
        options:
          - plan
          - apply
          - destroy
        required: true
        default: 'plan'

env:
  # Terraform Cloud backend credentials
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
  TF_WORKSPACE: ${{ secrets.TF_WORKSPACE }}
  TF_CLOUD_ORGANIZATION: ${{ secrets.TF_CLOUD_ORGANIZATION }}

  # AWS credentials
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  # SSH Key name (for EC2 provisioning)
  TF_VAR_ssh_key_name: ${{ secrets.AWS_KEY_PAIR_NAME }}

permissions:
  contents: read

jobs:
  terraform:
    name: Terraform ${{ github.event.inputs.action }}
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: Terraform # üëà Make sure your Terraform code is in this folder

    steps:
      # ------------------------------------------------------------
      # STEP 1: CHECKOUT CODE
      # ------------------------------------------------------------
      - name: Checkout Repository
        uses: actions/checkout@v5

      # ------------------------------------------------------------
      # STEP 2: SETUP TERRAFORM
      # ------------------------------------------------------------
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.5"
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # ------------------------------------------------------------
      # STEP 3: TERRAFORM COMMANDS
      # ------------------------------------------------------------
      - name: Terraform Init
        run: terraform init -input=false

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        if: ${{ github.event.inputs.action == 'plan' }}
        run: terraform plan -input=false

      - name: Terraform Apply
        if: ${{ github.event.inputs.action == 'apply' }}
        run: terraform apply -auto-approve -input=false

      - name: Terraform Destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        run: terraform destroy -auto-approve -input=false

      # ------------------------------------------------------------
      # STEP 4: SETUP SSH AGENT (FOR ANSIBLE)
      # ------------------------------------------------------------
      - name: Setup SSH Agent
        if: ${{ github.event.inputs.action == 'apply' }}
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.ANSIBLE_SSH_PRIVATE_KEY }}

      # ------------------------------------------------------------
      # STEP 5: INSTALL ANSIBLE + DEPENDENCIES
      # ------------------------------------------------------------
      - name: Install Ansible & Dependencies
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          echo "üü¢ Installing Ansible, jq, Python3, pip..."
          sudo apt update -y
          sudo apt install -y ansible python3 jq python3-pip
          pip3 install --user jinja2

      # ------------------------------------------------------------
      # STEP 6: COLLECT TERRAFORM OUTPUTS
      # ------------------------------------------------------------
      - name: Export Terraform Outputs to Ansible
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          echo "üì¶ Exporting Terraform outputs to ansible/ec2_ips.json"
          terraform output -json > ../ansible/ec2_ips.json

      # ------------------------------------------------------------
      # STEP 7: GENERATE DYNAMIC INVENTORY FOR ANSIBLE
      # ------------------------------------------------------------
      - name: Generate Dynamic Inventory
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          echo "‚öôÔ∏è Generating Ansible inventory from Terraform outputs..."
          cd ../ansible
          
          echo "üîç Checking scripts directory:"
          ls -l scripts/

          python3 scripts/generate_inventory.py ec2_ips.json inventory.ini

          echo "‚úÖ Generated inventory.ini:"
          cat inventory.ini

      # ------------------------------------------------------------
      # STEP 8: WAIT FOR EC2 TO BECOME REACHABLE
      # ------------------------------------------------------------
      - name: Wait for EC2 SSH Availability
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          echo "‚è≥ Waiting 60 seconds for instances to boot..."
          sleep 60
          
          export ANSIBLE_HOST_KEY_CHECKING=False
          cd ../ansible
          echo "üöÄ Checking SSH connection to all nodes..."
          ansible all -i inventory.ini -u ubuntu -m wait_for_connection -a "delay=5 timeout=300"

      # ------------------------------------------------------------
      # STEP 9: RUN ANSIBLE PLAYBOOK
      # ------------------------------------------------------------
      - name: Run Ansible Playbook
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          echo "‚úÖ Running Ansible Playbook..."
          cd ../ansible
          ansible-playbook -i inventory.ini -u ubuntu site.yml
