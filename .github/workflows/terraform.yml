name: 'ðŸ”¨ Terraform + Ansible Automation on AWS'

on:
  workflow_dispatch:
    inputs:
      action:
        type: choice
        description: 'Terraform Action'
        options:
          - plan
          - apply
          - destroy
        required: true
        default: 'plan'

env:
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
  TF_WORKSPACE: ${{ secrets.TF_WORKSPACE }}
  TF_CLOUD_ORGANIZATION: ${{ secrets.TF_CLOUD_ORGANIZATION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

permissions:
  contents: read

jobs:
  terraform:
    name: Terraform ${{ github.event.inputs.action }}
    runs-on: ubuntu-24.04
    environment: production

    defaults:
      run:
        shell: bash
        working-directory: Terraform

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.13.3"
          terraform_wrapper: true
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        if: ${{ github.event.inputs.action == 'plan' }}
        run: terraform plan -input=false

      - name: Terraform Apply
        if: ${{ github.event.inputs.action == 'apply' }}
        run: terraform apply -auto-approve

      - name: Terraform Destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        run: terraform destroy -auto-approve

      # ðŸ‘‡ Run Ansible only after successful Terraform apply
      - name: Run Ansible Playbook (Provision Servers)
        if: ${{ github.event.inputs.action == 'apply' }}
        working-directory: Ansible
        run: |
          sudo apt update -y
          sudo apt install ansible -y

          # Get EC2 IPs from Terraform outputs
          cd ../Terraform
          terraform output -json ec2_public_ips > ../Ansible/ec2_ips.json

          cd ../Ansible

          # Create dynamic inventory for Ansible
          python3 scripts/generate_inventory.py ec2_ips.json inventory.ini

          # Run the Ansible playbook
          ansible-playbook -i inventory.ini site.yml
