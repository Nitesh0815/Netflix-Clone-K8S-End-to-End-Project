name: 'üî® Terraform + Ansible Automation on AWS'

on:
  workflow_dispatch:
    inputs:
      action:
        type: choice
        description: 'Select Terraform Action'
        options:
          - plan
          - apply
          - destroy
        required: true
        default: 'plan'

env:
  # Secrets for Terraform Cloud Backend
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
  TF_WORKSPACE: ${{ secrets.TF_WORKSPACE }}
  TF_CLOUD_ORGANIZATION: ${{ secrets.TF_CLOUD_ORGANIZATION }}
  # Secrets for AWS Provider
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

permissions:
  contents: read

jobs:
  terraform:
    name: Terraform ${{ github.event.inputs.action }}
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        # Assuming your Terraform files are in a subdirectory named 'Terraform'
        working-directory: Terraform

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          # Use a valid Terraform version (adjust as needed)
          terraform_version: "1.7.5"
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        if: ${{ github.event.inputs.action == 'plan' }}
        run: terraform plan -input=false

      - name: Terraform Apply
        if: ${{ github.event.inputs.action == 'apply' }}
        run: terraform apply -auto-approve

      - name: Terraform Destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        run: terraform destroy -auto-approve

      # üîë CRITICAL: Set up SSH Key for Ansible Connectivity
      - name: Setup SSH Agent
        if: ${{ github.event.inputs.action == 'apply' }}
        uses: webfactory/ssh-agent@v0.9.0
        with:
          # This secret MUST contain the private key used to launch the EC2 instances
          ssh-private-key: ${{ secrets.ANSIBLE_SSH_PRIVATE_KEY }}

      # üîß Run Ansible after Terraform Apply
      - name: Run Ansible Playbook
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          echo "üü¢ Installing Ansible and jq..."
          sudo apt update -y
          sudo apt install -y ansible python3 jq

          echo "üì¶ Collecting Terraform Outputs..."
          # We're running inside the Terraform working-directory by default, so write output to the repo's ansible folder
          terraform output -json > ../ansible/ec2_ips.json

          echo "‚öôÔ∏è Generating Dynamic Inventory..."
          cd ../ansible
          ls -l # Debug: verify ec2_ips.json exists

          # Extract IPs from Terraform JSON output
          JENKINS_IP=$(jq -r '.jenkins_server_ip.value' ec2_ips.json)
          MONITORING_IP=$(jq -r '.monitoring_server_ip.value' ec2_ips.json)
          MASTER_IP=$(jq -r '.k8s_master_ip.value' ec2_ips.json)

          # Create a hosts file. We assume the connection user is 'ec2-user' 
          # (common for Amazon Linux AMIs). Adjust if necessary.
          cat <<-EOF > inventory.ini
[jenkins]
$JENKINS_IP ansible_user=ec2-user

[monitoring]
$MONITORING_IP ansible_user=ec2-user

[kubernetes_master]
$MASTER_IP ansible_user=ec2-user

[all:vars]
ansible_ssh_common_args='-o StrictHostKeyChecking=no'
          EOF

          echo "‚úÖ Inventory file created:"
          cat inventory.ini
          
          # Optional: Add a brief pause to allow EC2 instances to fully initialize SSH
          echo "üò¥ Waiting 60 seconds for EC2 instances to become fully reachable..."
          sleep 60
          
          echo "üöÄ Running Ansible Playbook with wait_for_connection..."
          # The -u ec2-user is redundant if set in inventory, but good practice.
          # We use the 'wait_for_connection' plugin via ad-hoc command before running the playbook.
          # This ensures the instance is up and ready for SSH.
          ansible all -i inventory.ini -m wait_for_connection -a "delay=5 timeout=300"
          
          echo "‚úÖ SSH Connection Established. Running site.yml..."
          ansible-playbook -i inventory.ini site.yml
